// 代码生成时间: 2025-08-01 18:26:26
const THREE = require('three');

// Function to create a 3D test report
function createTestReport(container, options) {
  // Default options
  const defaultOptions = {
    width: 800,
    height: 600,
    bgColor: 0x000000,
    title: 'Test Report',
    subTitle: 'Generated by Test Report Generator',
    data: []
  };

  // Merge options with default options
  const config = {...defaultOptions, ...options};

  // Error handling
  if (!container) {
    console.error('Container element is required');
    return;
  }

  // Create scene
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(config.bgColor);

  // Create camera
  const camera = new THREE.PerspectiveCamera(
    75,
    container.clientWidth / container.clientHeight,
    0.1,
    1000
  );
  camera.position.z = 5;

  // Create renderer
  const renderer = new THREE.WebGLRenderer({
    antialias: true,
    alpha: true
  });
  renderer.setSize(container.clientWidth, container.clientHeight);
  container.appendChild(renderer.domElement);

  // Create title text
  const titleGeometry = new THREE.TextGeometry(config.title, {
    font: new THREE.FontLoader().parse(THREE.Jam3Font),
    size: 1,
    height: 0.1
  });
  const titleMaterial = new THREE.MeshBasicMaterial({
    color: 0xffffff,
    side: THREE.DoubleSide
  });
  const titleMesh = new THREE.Mesh(titleGeometry, titleMaterial);
  titleMesh.position.set(0, 2, 0);
  scene.add(titleMesh);

  // Create subTitle text
  const subTitleGeometry = new THREE.TextGeometry(config.subTitle, {
    font: new THREE.FontLoader().parse(THREE.Jam3Font),
    size: 0.5,
    height: 0.1
  });
  const subTitleMaterial = new THREE.MeshBasicMaterial({
    color: 0xffffff,
    side: THREE.DoubleSide
  });
  const subTitleMesh = new THREE.Mesh(subTitleGeometry, subTitleMaterial);
  subTitleMesh.position.set(0, 1.5, 0);
  scene.add(subTitleMesh);

  // Create data points
  config.data.forEach((dataPoint, index) => {
    const dataGeometry = new THREE.TextGeometry(dataPoint.label, {
      font: new THREE.FontLoader().parse(THREE.Jam3Font),
      size: 0.5,
      height: 0.1
    });
    const dataMaterial = new THREE.MeshBasicMaterial({
      color: dataPoint.color,
      side: THREE.DoubleSide
    });
    const dataMesh = new THREE.Mesh(dataGeometry, dataMaterial);
    dataMesh.position.set(-2.5 + index * 1.5, 1 - index * 0.5, 0);
    scene.add(dataMesh);
  });

  // Render loop
  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();
}

// Usage example
const container = document.getElementById('test-report-container');
createTestReport(container, {
  title: 'Unit Test Report',
  subTitle: 'Generated on 2023-04-01',
  data: [
    { label: 'Test Case 1: Passed', color: 0x00ff00 },
    { label: 'Test Case 2: Failed', color: 0xff0000 },
    { label: 'Test Case 3: Skipped', color: 0xffff00 }
  ]
});